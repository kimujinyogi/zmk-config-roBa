#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// https://qiita.com/Reotech/items/e048073b3c5831d3e1c2
// #includeのあとのあたりにスクロール量変更の定義を追記

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        // 追加した (j_kim)

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W           &kp E         &kp R     &kp T                                                     &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S           &kp D         &kp F     &kp G      &trans             &kp MINUS                   &kp H        &kp J  &kp K      &kp L    &kp SINGLE_QUOTE
&kp Z      &kp X           &kp C         &kp V     &kp B      &kp SEMICOLON      &lt_to_layer_0 1 SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&lt 6 ESC  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCMD  &kp LSHFT  &kp LCTRL          &lt_to_layer_0 2 SPACE      &lt 3 ENTER                             &lt 5 BACKSPACE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FunNNum {
            bindings = <
&kp F22    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp F21                       &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&trans     &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp F20  &trans       &kp F6  &kp F7   &kp F8   &kp F9   &kp F10  &kp F11
&kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp F18  &kp F19      &trans  &kp F12  &kp F13  &kp F14  &kp F15  &kp F16
&trans     &trans     &trans     &trans     &trans   &trans       &trans  &trans                              &kp F17
            >;
        };

        Symbol {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5                              &kp N6          &kp N7           &kp N8     &kp N9     &kp N0
&trans  &trans  &trans  &trans  &trans  &trans      &kp UNDERSCORE  &kp LBKT        &kp RBKT         &kp MINUS  &kp EQUAL  &kp BSLH
&trans  &trans  &trans  &trans  &trans  &trans      &trans          &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp COLON  &kp SEMI   &kp APOS
&trans  &trans  &trans  &trans  &trans  &trans      &trans          &trans                                                 &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESC    &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                                    &trans    &kp MINUS  &kp PLUS      &kp BACKSLASH  &kp BACKSPACE
&kp HOME   &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &kp INT1             &kp INT2  &kp UP     &kp ASTERISK  &trans         &kp RETURN
&kp LSHFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &kp INTERNATIONAL_1  &kp LEFT  &kp DOWN   &kp RIGHT     &trans         &trans
&trans     &trans                  &trans          &trans                   &trans   &trans      &trans               &trans                                            &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB1  &mkp MB3  &mkp MB2
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        bt {
            bindings = <
&kp LS(LA(LC(Q)))  &kp LS(LA(LC(W)))  &kp LS(LA(LC(E)))  &kp LS(LA(LC(R)))  &trans                                      &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LC(LA(LS(D)))  &kp LC(LS(LA(F)))  &kp LS(LA(J))      &trans      &trans       &trans          &trans        &trans        &trans        &trans
&kp LC(LA(LS(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))  &kp LS(LA(LC(V)))  &kp LS(LA(SPACE))  &trans      &bootloader  &bt BT_CLR_ALL  &bt BT_CLR    &trans        &trans        &trans
&trans             &trans             &trans             &trans             &trans             &trans      &trans       &trans                                                    &trans
            >;
        };

        Shortcut {
            bindings = <
&kp LS(LA(LC(Q)))  &kp LS(LA(LC(W)))  &kp LS(LA(LC(E)))  &kp LS(LA(LC(R)))  &trans                                 &trans  &trans  &trans  &trans  &trans
&kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LC(LA(LS(D)))  &kp LC(LS(LA(F)))  &kp LS(LA(J))      &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LC(LA(LS(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))  &kp LS(LA(LC(V)))  &kp LS(LA(SPACE))  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans             &trans             &trans             &trans             &trans             &trans      &trans  &trans                          &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
